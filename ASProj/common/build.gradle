plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}
def ext = rootProject.ext
def dependency = rootProject.ext.dependencies
android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding {
        enabled = true
    }
}

project.ext.react = [
        entryFile    : "index.android.js",
        enableHermes : false,
        bundleInAlpha: true,
        bundleInDebug: true,
        bundleInBate : true
]
//rn

def enableHermes = project.ext.react.get("enableHermes", false);
def jscFlavor = 'org.webkit:android-jsc:+'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}
//rn end

dependencies {

    api project(path: ':hi-library')
    api project(path: ':hi-ui')

    implementation dependency.lifecycle_extensions
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    kapt dependency.lifecycle_compiler
    api dependency.constraintlayout
    api dependency.appcompat
    api dependency.material
    api dependency.recyclerview
    api dependency.fragment_ktx

    //glide图片
    implementation dependency.glide
    kapt dependency.glide_compiler

    //http
    implementation dependency.retrofit
    api dependency.gson

    //arouter
    implementation dependency.arouter_api
    kapt dependency.arouter_compiler

    api project(':flutter')

    //rn
    if (enableHermes) {
        def hermesPath = "../../rn_module/node_modules/hermesvm/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
    implementation "com.facebook.react:react-native:+" // From node_modules
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    //rn end
}